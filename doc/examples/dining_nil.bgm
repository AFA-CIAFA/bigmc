%name P1;
%name P2;
%name P3;
%name P4;
%name P5;

%name F1;
%name F2;
%name F3;
%name F4;
%name F5;

%passive F : 1; # Fork-id
%passive P : 3; # Left-fork, Phil-id, Right-fork

# Acquire a left fork
%rule pickup_left P[lf,p,rf] || F[lf] -> P[lf,p,rf].F[lf] || nil;
# Acquire a right fork
%rule pickup_right P[lf,p,rf].F[lf] || F[rf] -> P[lf,p,rf].(F[lf] | F[rf]) || nil;
# Drop left fork
%rule drop_left P[lf,p,rf].(F[lf] | F[rf]) -> P[lf,p,rf].F[rf] | F[lf];
# Drop right fork
%rule drop_right P[lf,p,rf].F[rf] -> P[lf,p,rf] | F[rf];

# The philosopher's table!

F[F1] | P[F1,P1,F2] | F[F2] | P[F2,P2,F3] | F[F3] | P[F3,P3,F4] | F[F4] | P[F4,P4,F5] | F[F5] | P[F5,P5,F1];

%property deadlock_free !terminal();

%check;

